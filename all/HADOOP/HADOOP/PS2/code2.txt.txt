package myPackage;

import java.io.IOException;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException{
		Configuration c = new Configuration();
		String []files = new GenericOptionsParser(c, args).getRemainingArgs();
		Path input = new Path(files[0]);
		Path output = new Path(files[1]);
		Job j = Job.getInstance(c, "WordCount");
		j.setJarByClass(WordCount.class);
		j.setMapperClass(MapWordCount.class);
		j.setReducerClass(ReduceWordCount.class);
		j.setMapOutputKeyClass(Text.class);
		j.setMapOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(j, input);
		FileOutputFormat.setOutputPath(j, output);
		System.exit(j.waitForCompletion(true)?0:1);
		
	}
	
	public static class MapWordCount extends Mapper<LongWritable, Text, Text, IntWritable>{
		public void map(LongWritable key, Text value , Context con) throws IOException, InterruptedException{
			String line = value.toString();
			String[] words = line.split(",");
			for(String word: words){
				Text t = new Text(word.trim().toUpperCase());
				IntWritable one = new IntWritable(1);
				con.write(t, one);
			}
		}
	}
	public static class ReduceWordCount extends Reducer<Text, IntWritable, Text, IntWritable>{
		public void reduce(Text key, Iterable<IntWritable>value, Context con) throws IOException, InterruptedException{
			int sum = 0;
			for(IntWritable i:value){
				sum += i.get();
			}
			con.write(key, new IntWritable(sum));
		}
	}
}
