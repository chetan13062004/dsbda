package myPackage;
import java.io.IOException;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
public class Movie {
	public static void main(String[] args) throws Exception{
		Configuration c = new Configuration();
		String files[] = new GenericOptionsParser(c, args).getRemainingArgs();
		Path input = new Path(files[0]);
		Path output = new Path(files[1]);
		Job j = Job.getInstance(c, "Music");
		j.setJarByClass(Movie.class);
		j.setMapperClass(MapMovie.class);
		j.setReducerClass(ReduceMovie.class);
		j.setOutputKeyClass(Text.class);
		j.setOutputValueClass(FloatWritable.class);
		FileInputFormat.addInputPath(j, input);
		FileOutputFormat.setOutputPath(j, output);
		System.exit(j.waitForCompletion(true)?0:1);
	}
	
	public static class MapMovie extends Mapper<LongWritable, Text, Text, FloatWritable>{
		public void map(LongWritable key, Text value, Context con) throws IOException, InterruptedException{
			String line = value.toString();
			if (line.startsWith("userId")) return; 
			String words[] = line.split(",");
			if(words.length >= 3){
				String movieId = words[1];
				String rat = words[2];
				float rating = Float.parseFloat(rat);
				con.write(new Text(movieId), new FloatWritable(rating));
			}
		}
	}
	
	public static class ReduceMovie extends Reducer<Text, FloatWritable, Text, FloatWritable>{
		private static boolean flag = true;
		public void reduce(Text key, Iterable<FloatWritable>values, Context con) throws IOException, InterruptedException{
			if(flag){
				con.write(new Text("Movie"), new FloatWritable(0));
				flag = false;
			}
			int count = 0;
			float sum = 0;
			for(FloatWritable val: values){
				count++;
				sum += val.get();
			}
			
			con.write(key, new FloatWritable(sum/count));
		}
	}
}
